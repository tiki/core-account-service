name: ci-cd

on:
  push:
    tags:
      - '*.*.*'

jobs:

  build_test_push:
    runs-on: ubuntu-latest
    environment: Production
    services:
      postgres:
        image: postgres:13.2
        env:
          POSTGRES_USER: tester
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_TEST_PW }}
          POSTGRES_DB: l0_auth
          POSTGRES_PORT: 5432
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout
        uses: actions/checkout@v2.1.1
        with:
          path: l0-auth

      - name: Checkout spring-rest-api
        uses: actions/checkout@v3
        with:
          repository: tiki/spring-rest-api
          path: spring-rest-api
          ref: '1.0.0'

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'zulu'

      - name: Install CLI
        uses: dopplerhq/cli-action@v1

      - name: Install PostgreSQL client
        run: |
          sudo apt-get update
          sudo apt-get install --yes postgresql-client

      - name: Create Tables
        run: psql -h localhost -d l0_auth -U tester -f l0-auth/database/create_tables.sql
        env:
          PGPASSWORD: ${{ secrets.POSTGRES_TEST_PW }}

      - name: Maven Install spring-rest-api
        run: |
          cd spring-rest-api
          mvn install

      - name: Maven Package L0 Auth
        run: |
          cd l0-auth
          doppler run -c tst -- mvn clean package
        env:
          DOPPLER_TOKEN: ${{ secrets.DOPPLER_ST }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: |
            registry.digitalocean.com/tiki/l0-auth
          tags: |
            type=ref,event=tag
            type=semver,pattern={{version}}

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DO_PAT }}

      - name: Registry login
        run: doctl registry login --expiry-seconds 600

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: l0-auth/
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          build-args: |
            JAR_FILE=target/*.jar
            DOPPLER_ST=${{ secrets.DOPPLER_ST }}

  deploy_to_infra:
    runs-on: ubuntu-latest
    needs: [ build_test_push ]

    steps:
      - name: Checkout
        uses: actions/checkout@v2.1.1

      - name: Get Version From Tag
        id: vars
        run: echo ::set-output name=tag::${GITHUB_REF#refs/*/}

      - name: Setup Terraform Variables
        working-directory: ./infra
        run: |-
          cat > pipeline.auto.tfvars <<EOF
          sem_ver = "${{ steps.vars.outputs.tag }}"
          EOF

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt
        working-directory: infra

      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: infra

      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve
        working-directory: infra

  sentry_release:
    runs-on: ubuntu-latest
    needs: [ deploy_to_infra ]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Create Sentry release
        uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: 'my-tiki'
          SENTRY_PROJECT: 'l0-auth'
        with:
          environment: public