AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Core Account Service

Parameters:
  Name:
    Type: String
    Description: Name of the service
    Default: core-account-service
  VpcId:
    Type: String
    Description: The id of the VPC to use.
  Subnets:
    Type: List<String>
    Description: Comma seperated list of public subnets for the load balancer.
  Certificate:
    Type: String
    Description: ARN of the SSL certificate.
  Port:
    Type: Number
    Description: Port number for the service.
    Default: 8228
  DeployRole:
    Type: String
    Description: IAM deployment role for uploading containers.
  Version:
    Type: String
    Description: The container version number.
  Username:
    Type: String
    Description: The database username
  Password:
    Type: String
    Description: The database password
    NoEcho: true
  Secret:
    Type: String
    Description: The arn for the secret properties.
  DBSubnet:
    Type: String
    Description: The RDS subnet group to use
    Default: default-all

Resources:
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VpcId
      GroupDescription: Core Account Service
      Tags:
        - Key: Name
          Value: Core Account Service
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIpv6: ::/0

  DBIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt SecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 5432
      ToPort: 5432
      SourceSecurityGroupId: !GetAtt SecurityGroup.GroupId

  ServiceIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt SecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 8228
      ToPort: 8228
      SourceSecurityGroupId: !GetAtt SecurityGroup.GroupId

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Ref Name
      Scheme: internet-facing
      Type: application
      SecurityGroups:
        - !Ref SecurityGroup
      Subnets: !Ref Subnets

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: LoadBalancer
    Properties:
      VpcId: !Ref VpcId
      Name: !Ref Name
      Port: !Ref Port
      Protocol: HTTP
      HealthCheckEnabled: true
      HealthCheckPath: /health
      HealthCheckProtocol: HTTP
      TargetType: ip

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref Certificate
      SslPolicy: ELBSecurityPolicy-TLS13-1-0-2021-06
      LoadBalancerArn: !GetAtt LoadBalancer.LoadBalancerArn
      DefaultActions:
        - Type: forward
          TargetGroupArn: !GetAtt TargetGroup.TargetGroupArn

  Database:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: account_service
      AllocatedStorage: 25
      AutoMinorVersionUpgrade: true
      BackupRetentionPeriod: 30
      DBInstanceIdentifier: !Ref Name
      DBInstanceClass: db.t4g.micro
      DeletionProtection: true
      Engine: postgres
      EngineVersion: 15.3
      MasterUsername: !Ref Username
      MasterUserPassword: !Ref Password
      PubliclyAccessible: false
      StorageEncrypted: true
      MaxAllocatedStorage: 250
      CACertificateIdentifier: rds-ca-ecc384-g1
      DBSubnetGroupName: !Ref DBSubnet
      VPCSecurityGroups:
        - !GetAtt SecurityGroup.GroupId

  Registry:
    Type: AWS::ECR::Repository
    Properties:
      ImageScanningConfiguration:
        ScanOnPush: true
      ImageTagMutability: IMMUTABLE
      RepositoryName: !Ref Name
      RepositoryPolicyText: !Sub "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Sid\":\"new statement\",\"Effect\":\"Allow\",\"Principal\":{\"AWS\": [\"arn:aws:iam::${AWS::AccountId}:role/${DeployRole}\"]},\"Action\": \"ecr:PutImage\"}]}"

  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref Name

  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "task-${Name}"
      Description: ECS Task Role for Core Account Service
      AssumeRolePolicyDocument:
        Version: '2008-10-17'
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: ecs-tasks.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLakeFormationCrossAccountManager
      Policies:
        - PolicyName: XRay
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - xray:PutTraceSegments
                  - xray:PutTelemetryRecords
                  - xray:GetSamplingRules
                  - xray:GetSamplingTargets
                  - xray:GetSamplingStatisticSummaries
                Resource: "*"
        - PolicyName: SFN
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - states:DescribeExecution
                  - states:StartExecution
                Resource:
                  - !Sub arn:aws:states:${AWS::Region}:${AWS::AccountId}:execution:core-account-cleanroom-create:*
                  - !Sub arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:core-account-cleanroom-create
                  - !Sub arn:aws:states:${AWS::Region}:${AWS::AccountId}:express:core-account-cleanroom-create:*:*
                  - !Sub arn:aws:states:${AWS::Region}:${AWS::AccountId}:execution:core-account-subscription-estimate:*
                  - !Sub arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:core-account-subscription-estimate
                  - !Sub arn:aws:states:${AWS::Region}:${AWS::AccountId}:express:core-account-subscription-estimate:*:*
                  - !Sub arn:aws:states:${AWS::Region}:${AWS::AccountId}:execution:core-account-subscription-purchase:*
                  - !Sub arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:core-account-subscription-purchase
                  - !Sub arn:aws:states:${AWS::Region}:${AWS::AccountId}:express:core-account-subscription-purchase:*:*
        - PolicyName: SQS
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: sqs:SendMessage
                Resource: arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:ocean-core-trail-write.fifo

  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "exec-${Name}"
      Description: ECS Execution Role for Core Account Service
      AssumeRolePolicyDocument:
        Version: '2008-10-17'
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: ecs-tasks.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: Log
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: logs:CreateLogGroup
                Resource: !Sub "arn:aws:logs:*:${AWS::AccountId}:log-group:*"
        - PolicyName: Secret
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameters
                  - secretsmanager:GetSecretValue
                  - kms:Decrypt
                Resource:
                  - !Ref Secret
                  - !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/*"

  Task:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Name: !Ref Name
          Essential: true
          Image: !Sub [ "${URI}:${Version}", { URI: !GetAtt Registry.RepositoryUri, Version: !Ref Version } ]
          PortMappings:
            - ContainerPort: !Ref Port
          Environment:
            - Name: SPRING_DATASOURCE_URL
              Value: !Sub [ "jdbc:postgresql://${Endpoint}:5432/account_service", { Endpoint: !GetAtt Database.Endpoint.Address } ]
          Secrets:
            - Name: SPRING_DATASOURCE_USERNAME
              ValueFrom: !Sub "${Secret}:SPRING_DATASOURCE_USERNAME::"
            - Name: SPRING_DATASOURCE_PASSWORD
              ValueFrom: !Sub "${Secret}:SPRING_DATASOURCE_PASSWORD::"
            - Name: SENDGRID_API_KEY
              ValueFrom: !Sub "${Secret}:SENDGRID_API_KEY::"
            - Name: ACCOUNT_JWT_PRIVATE_KEY
              ValueFrom: !Sub "${Secret}:ACCOUNT_JWT_PRIVATE_KEY::"
            - Name: ACCOUNT_JWT_KID
              ValueFrom: !Sub "${Secret}:ACCOUNT_JWT_KID::"
            - Name: ACCOUNT_OAUTH_CLIENT_CREDENTIALS_INTERNAL_JSON
              ValueFrom: !Sub "${Secret}:ACCOUNT_OAUTH_CLIENT_CREDENTIALS_INTERNAL_JSON::"
            - Name: README_SECRET
              ValueFrom: !Sub "${Secret}:README_SECRET::"
            - Name: GITHUB_OAUTH_ID
              ValueFrom: !Sub "${Secret}:GITHUB_OAUTH_ID::"
            - Name: GITHUB_OAUTH_SECRET
              ValueFrom: !Sub "${Secret}:GITHUB_OAUTH_SECRET::"
            - Name: GOOGLE_OAUTH_ID
              ValueFrom: !Sub "${Secret}:GOOGLE_OAUTH_ID::"
            - Name: GOOGLE_OAUTH_SECRET
              ValueFrom: !Sub "${Secret}:GOOGLE_OAUTH_SECRET::"
            - Name: STRIPE_SECRET
              ValueFrom: !Sub "${Secret}:STRIPE_SECRET::"
            - Name: STRIPE_PRICE
              ValueFrom: !Sub "${Secret}:STRIPE_PRICE::"
            - Name: EVENT_REGION
              ValueFrom: !Sub "${Secret}:EVENT_REGION::"
            - Name: ARN_CR_CREATE
              ValueFrom: !Sub "${Secret}:ARN_CR_CREATE::"
            - Name: ARN_SUB_ESTIMATE
              ValueFrom: !Sub "${Secret}:ARN_SUB_ESTIMATE::"
            - Name: ARN_SUB_PURCHASE
              ValueFrom: !Sub "${Secret}:ARN_SUB_PURCHASE::"
            - Name: TRAIL_SQS_REGION
              ValueFrom: !Sub "${Secret}:TRAIL_SQS_REGION::"
            - Name: TRAIL_SQS_URL
              ValueFrom: !Sub "${Secret}:TRAIL_SQS_URL::"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Sub "/ecs/${Name}"
              awslogs-create-group: true
              awslogs-stream-prefix: ecs
        - Name: xray-daemon
          Image: public.ecr.aws/xray/aws-xray-daemon:latest
          Cpu: 32
          MemoryReservation: 256
          PortMappings:
            - ContainerPort: 2000
              Protocol: udp
      Cpu: 512
      Memory: 2048
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt ExecutionRole.Arn
      TaskRoleArn: !GetAtt TaskRole.Arn
      RuntimePlatform:
        CpuArchitecture: X86_64
        OperatingSystemFamily: LINUX

  Service:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !GetAtt Cluster.Arn
      DeploymentConfiguration:
        MinimumHealthyPercent: 50
      DeploymentController:
        Type: ECS
      DesiredCount: 2
      HealthCheckGracePeriodSeconds: 300
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: !Ref Name
          ContainerPort: !Ref Port
          TargetGroupArn: !GetAtt TargetGroup.TargetGroupArn
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !GetAtt SecurityGroup.GroupId
          Subnets: !Ref Subnets
      PlatformVersion: LATEST
      ServiceName: !Ref Name
      TaskDefinition: !GetAtt Task.TaskDefinitionArn
